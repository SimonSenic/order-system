package com.example.demo.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.UserDTO;
import com.example.demo.mapper.UserMapper;
import com.example.demo.model.Role;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
public class UserController {
	private UserRepository userRepository;
	private UserMapper userMapper;
	
	@GetMapping
	public List<User> getUsers(){
		return userRepository.findAll();
	}
	
	@GetMapping("/{id}")
	public User getUser(@PathVariable(value = "id") long id){
		User user = userRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("User not found"));
		return user;
	}
	
	@PostMapping("/customer")
	public ResponseEntity<UserDTO> createCustomer(@RequestBody User body) {
		User user = new User(body.getEmail());
		user.setRole(Role.CUSTOMER);
		UserDTO userDTO = userMapper.toDTO(user);
		return ResponseEntity.ok().body(userDTO);
	}

	@PatchMapping("/customer/{id}")
	public User updateCustomer(@PathVariable(value = "id") long id, @RequestBody User body) {
		 User user = userRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("User not found"));
		 user.setName(body.getName());
		 user.setPassword(body.getPassword());
		 user.setAddress(body.getAddress());
		return user;
	}
	
}
